trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - ProjectName-mono-repo-dev.yml

pr: none

pool:
  vmImage: windows-latest # ps1 files are run on windows

variables:
  - group: TELERIK_KEYS_GROUP

steps:
  #region: ProjectName Online
  - task: CmdLine@2
    displayName: "Display Build Environment Variables"
    inputs:
      script: |
        echo Build.DefinitionName: $(Build.DefinitionName)
        echo Build.BuildNumber: $(Build.BuildNumber)
        echo Build.Repository.Name: $(Build.Repository.Name)
        echo Build.Repository.Provider: $(Build.Repository.Provider)
        echo Build.SourceBranch: $(Build.SourceBranch)
        echo Build.SourceBranchName: $(Build.SourceBranchName)
        echo Build.SourceVersion: $(Build.SourceVersion)
        echo Pipeline.Workspace: $(Pipeline.Workspace)

  - task: CmdLine@2
    displayName: "List files (first)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

  - task: PowerShell@2
    displayName: "Updating buildinfo.json with Build info"
    inputs:
      targetType: "inline"
      script: |
        Get-Content "$(Build.SourcesDirectory)/web/api/ProjectNameApi/buildinfo.json" 
        $json = Get-Content "$(Build.SourcesDirectory)/web/api/ProjectNameApi/buildinfo.json" | ConvertFrom-Json 

        $json.repository = '$(Build.Repository.Name)'
        $json.branch = '$(Build.SourceBranchName)'
        $json.pipeline = '$(Build.DefinitionName)'
        $json.buildNumber = '$(Build.BuildNumber)'

        $json | ConvertTo-Json | Out-File "$(Build.SourcesDirectory)/application/buildinfo.json"
        Get-Content "$(Build.SourcesDirectory)/application/buildinfo.json"

  - task: CmdLine@2
    displayName: "List files (after updating buildinfo.json)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

  - task: CopyFiles@2
    displayName: "Copy buildinfo.json from Source/application to Binaries/staging "
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/application"
      Contents: |
        buildinfo.json
      TargetFolder: "$(Build.BinariesDirectory)/run"
      CleanTargetFolder: true
      OverWrite: true

  - task: CmdLine@2
    displayName: "List files (after copying Source/application to Binaries/staging)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

    ## Publish -- io-modules ##
  - task: DotNetCoreCLI@2
    displayName: "dotnet publish - io-modules"
    inputs:
      command: "publish"
      projects: "application/io-modules/NJTransit.AdabasMigration.sln"
      publishWebProjects: false
      arguments: "--no-dependencies -c Release -r win-x64 -p:PublishSingleFile=False --self-contained false -m:1 -nr:false --property:PublishDir=$(Build.BinariesDirectory) --output $(Build.BinariesDirectory)/publish --version-suffix $(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)"
      zipAfterPublish: false
      workingDirectory: "application/io-modules/"

  - task: CmdLine@2
    displayName: "List files (after dotNet publish - io-modules)"
    inputs:
      script: |
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

    ## Publish -- programs ##
  - task: DotNetCoreCLI@2
    displayName: "dotnet publish - programs"
    inputs:
      command: "publish"
      projects: "application/programs/NJTransit.NaturalMigration.sln"
      publishWebProjects: false
      arguments: "--no-dependencies -c Release -r win-x64 -p:PublishSingleFile=False --self-contained false -m:1 -nr:false --property:PublishDir=$(Build.BinariesDirectory) --output $(Build.BinariesDirectory)/publish --version-suffix $(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)"
      zipAfterPublish: false
      workingDirectory: "application/programs/"

  - task: CmdLine@2
    displayName: "List files (after dotNet publish - programs)"
    inputs:
      script: |
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

    ## Publish -- framework ##
  - task: DotNetCoreCLI@2
    displayName: "dotnet publish - framework"
    inputs:
      command: "publish"
      projects: "application/framework/NJTransit.Integration.sln"
      publishWebProjects: false
      arguments: "--no-dependencies -c Release -r win-x64 -p:PublishSingleFile=False --self-contained false -m:1 -nr:false --property:PublishDir=$(Build.BinariesDirectory) --output $(Build.BinariesDirectory)/publish --version-suffix $(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)"
      zipAfterPublish: false
      workingDirectory: "application/framework/"

  - task: CmdLine@2
    displayName: "List files (after dotNet publish - framework)"
    inputs:
      script: |
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

    ## Copy-IOModules ##
  - task: CopyFiles@2
    displayName: "ProjectName-Online: Copy I/O Modules"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/io-modules"
      Contents: NJTransit.*
      TargetFolder: "$(Build.BinariesDirectory)/run/io-modules"
      CleanTargetFolder: true
      OverWrite: true

  - task: CopyFiles@2
    displayName: "ProjectName-Online: Copy I/O Modules to Framework"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/io-modules"
      Contents: |
        **
        !runtimes/**
        !NJTransit.*
      TargetFolder: "$(Build.BinariesDirectory)/run/framework"
      CleanTargetFolder: true
      OverWrite: true

  - task: CmdLine@2
    displayName: "ProjectName-Online: List files (after copying IO Modules to run)"
    inputs:
      script: |
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

    ## Copy-Programs ##
  - task: CopyFiles@2
    displayName: "ProjectName-Online: Copy program files"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/programs"
      Contents: | 
        NJTransit.*
        !*ProjectNamepb01*.*
      TargetFolder: "$(Build.BinariesDirectory)/run/programs"
      CleanTargetFolder: true
      OverWrite: true      

  - task: CopyFiles@2
    displayName: "ProjectName-Online: Copy program files to Framework (do not clean target folder!!!)"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/programs"
      Contents: |
        **
        !runtimes/**
        !NJTransit.*
      TargetFolder: "$(Build.BinariesDirectory)/run/framework"
      CleanTargetFolder: false
      OverWrite: true

  - task: CmdLine@2
    displayName: "ProjectName-Online: List files (after copying program files to run)"
    inputs:
      script: |
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

    ## Copy-Integration ##
  - task: CopyFiles@2
    displayName: "ProjectName-Online: Copy framework files (do not clean target folder!!!)"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/framework"
      Contents: |
        **/*
        !njtrun.*.config
      TargetFolder: "$(Build.BinariesDirectory)/run/framework"
      CleanTargetFolder: false
      OverWrite: true

  - task: CmdLine@2
    displayName: "List files (after copy to run)"
    inputs:
      script: |
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

    ## Final staging to prep for zip ##
  - task: CopyFiles@2
    displayName: "ProjectName-Online: Final staging to prep for zip"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/run"
      Contents: "**"
      TargetFolder: "$(Build.BinariesDirectory)/staging/ProjectName/App"
      CleanTargetFolder: true
      OverWrite: true

  - task: ArchiveFiles@2
    displayName: "Compress ProjectNameOnline to Zip"
    inputs:
      rootFolderOrFile: "$(Build.BinariesDirectory)/staging/ProjectName"
      includeRootFolder: false #
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-ProjectNameOnline.zip"

  - task: CmdLine@2
    displayName: "List files (after Compress to Zip: ProjectNameOnline.zip)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

  #endregion: ProjectName Online

  #region: ProjectName Batch
  - task: CopyFiles@2
    displayName: "Copy buildinfo.json from Source/run to Binaries/run-batch "
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/application"
      Contents: buildinfo.json
      TargetFolder: "$(Build.BinariesDirectory)/run-batch"
      CleanTargetFolder: true
      OverWrite: true

  - task: CmdLine@2
    displayName: "List files (after copying Source/application to Binaries/run-batch)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

    ## Copy-IOModules run-batch ##
  - task: CopyFiles@2
    displayName: "ProjectName-Batch: Copy I/O Modules"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/io-modules"
      Contents: NJTransit.*
      TargetFolder: "$(Build.BinariesDirectory)/run-batch/io-modules"
      CleanTargetFolder: true
      OverWrite: true

  - task: CopyFiles@2
    displayName: "ProjectName-Batch: Copy I/O Modules  to Framework"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/io-modules"
      Contents: |
        **
        !runtimes/**
        !NJTransit.*
      TargetFolder: "$(Build.BinariesDirectory)/run-batch/framework"
      CleanTargetFolder: true
      OverWrite: true

    ## Copy-Programs run-batch ##
  - task: CopyFiles@2
    displayName: "ProjectName-Batch: Copy program files"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/programs"
      Contents: | 
        NJTransit.*
        !*ProjectNamepo01*.*
      TargetFolder: "$(Build.BinariesDirectory)/run-batch/programs"
      CleanTargetFolder: true
      OverWrite: true

  - task: CopyFiles@2
    displayName: "ProjectName-Batch: Copy program files to Framework (do not clean target folder!!!)"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/programs"
      Contents: |
        **
        !runtimes/**
        !NJTransit.*
      TargetFolder: "$(Build.BinariesDirectory)/run-batch/framework"
      CleanTargetFolder: false
      OverWrite: true

    ## Copy-Integration run-batch ##
  - task: CopyFiles@2
    displayName: "ProjectName-Batch: Copy Framework files"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/publish/framework"
      Contents: |
        **
        !njtrun.*.config
      TargetFolder: "$(Build.BinariesDirectory)/run-batch/framework"
      CleanTargetFolder: true
      OverWrite: true

    ## Copy-Batch-Scripts run-batch ##
  - task: CopyFiles@2
    displayName: "ProjectName-Batch: Copy Batch Scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/application/batch-scripts"
      Contents: "**"
      TargetFolder: "$(Build.BinariesDirectory)/run-batch/batch-scripts"
      CleanTargetFolder: true
      OverWrite: true

  - task: CmdLine@2
    displayName: "ProjectName-Batch: List files (after copy to run-batch)"
    inputs:
      script: |
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

    ## Final staging to prep for zip ##
  - task: CopyFiles@2
    displayName: "ProjectName-Batch: Final staging to prep for zip"
    inputs:
      SourceFolder: "$(Build.BinariesDirectory)/run-batch"
      Contents: "**"
      TargetFolder: "$(Build.BinariesDirectory)/staging/ProjectName-Batch/App"
      CleanTargetFolder: true
      OverWrite: true

  - task: ArchiveFiles@2
    displayName: "Compress ProjectNameBatch to Zip"
    inputs:
      rootFolderOrFile: "$(Build.BinariesDirectory)/staging/ProjectName-Batch"
      includeRootFolder: false #
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-ProjectNameBatch.zip"

  - task: CmdLine@2
    displayName: "List files (after Compress to Zip: ProjectNameBatch.zip)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1
  #endregion: ProjectName Batch
  
  #region: Build/Publish |- client |- api |- MfApps

    #Building react web client
  - task: NodeTool@0
    displayName: "React: web client - Install Node.js 22.x"
    inputs:
      versionSpec: "22.x"

  - task: CmdLine@2
    displayName: "React: web client - List files (after node install)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  - task: Npm@1
    displayName: "React: web client - npm ci"
    inputs:
      command: "ci"
      workingDir: "web/client"

  - task: CmdLine@2
    displayName: "React: web client - List files (after npm ci)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  # React: Telerik License Activate
  - task: Bash@3
    displayName: "React: Activate Kendo UI License"
    inputs:
      targetType: "inline"
      script: |
        # React: Activate Kendo UI License
        npx kendo-ui-license activate
      workingDirectory: "web/client"
    env:
      KENDO_UI_LICENSE: $(TELERIK_NODE_REACT_KEY)

  - task: Npm@1
    displayName: "React: web client - npm run build"
    inputs:
      command: "custom"
      workingDir: "web/client"
      customCommand: "run build"

  - task: CmdLine@2
    displayName: "React: web client - List files (after npm run build)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  - task: CopyFiles@2
    displayName: "React: web client - Copy build files to Binaries folder"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/web/client/build"
      Contents: "**"
      TargetFolder: "$(Build.BinariesDirectory)/web/Inetpub/WWWRoot/ProjectName/client"
      CleanTargetFolder: true
      OverWrite: true

  - task: CmdLine@2
    displayName: "React: web client - List files (after copy from source to binaries)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

    #Building .net web api
  - task: PowerShell@2
    displayName: "Updating buildinfo.json with Build info"
    inputs:
      targetType: "inline"
      script: |
        Get-Content "$(Build.SourcesDirectory)/web/api/ProjectNameApi/buildinfo.json" 
        $json = Get-Content "$(Build.SourcesDirectory)/web/api/ProjectNameApi/buildinfo.json" | ConvertFrom-Json 

        $json.repository = '$(Build.Repository.Name)'
        $json.branch = '$(Build.SourceBranchName)'
        $json.pipeline = '$(Build.DefinitionName)'
        $json.buildNumber = '$(Build.BuildNumber)'

        $json | ConvertTo-Json | Out-File "$(Build.SourcesDirectory)/web/api/ProjectNameApi/buildinfo.json"
        Get-Content "$(Build.SourcesDirectory)/web/api/ProjectNameApi/buildinfo.json"

  - task: DotNetCoreCLI@2
    displayName: "dotnet publish - api"
    inputs:
      command: "publish"
      publishWebProjects: false
      arguments: "--no-dependencies -c Release -r win-x64 -p:PublishSingleFile=False --self-contained true --property:PublishDir=$(Build.BinariesDirectory) --output $(Build.BinariesDirectory)/web/Inetpub/WWWRoot/ProjectName/api --version-suffix $(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)"
      zipAfterPublish: false
      workingDirectory: "web/api/"

  - task: CmdLine@2
    displayName: "List files (after dotNet publish)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

    #Building MfApps YARP
  - task: DotNetCoreCLI@2
    displayName: "MfApps - dotnet publish"
    inputs:
      command: "publish"
      publishWebProjects: false
      arguments: "--no-dependencies -c Release -r win-x64 -p:PublishSingleFile=False --self-contained true --property:PublishDir=$(Build.BinariesDirectory) --output $(Build.BinariesDirectory)/web/Inetpub/WWWRoot/ProjectName/mfApps --version-suffix $(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)"
      zipAfterPublish: false
      workingDirectory: "web/mfApps"

  - task: CmdLine@2
    displayName: "MfApps - List files (after dotNet publish)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

    #Compress Web site to zip Inetpub |-client |-api |-mfApps |-TestUser
  - task: ArchiveFiles@2
    displayName: "web.Inetpub - Compress Web site to Zip"
    inputs:
      rootFolderOrFile: "$(Build.BinariesDirectory)/web/Inetpub"
      includeRootFolder: false #
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-web-Inetpub.zip"

  - task: CmdLine@2
    displayName: "Inetpub - List files (after Compress to Zip)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

  #endregion: Build/Publish |- client |- api |- MfApps

  #region: Build |- TestUser
    #Building TestUser MVC
  - task: DotNetCoreCLI@2
    displayName: "TestUser - dotnet publish"
    inputs:
      command: "publish"
      publishWebProjects: false
      arguments: "--no-dependencies -c Release -r win-x64 -p:PublishSingleFile=False --self-contained true --property:PublishDir=$(Build.BinariesDirectory) --output $(Build.BinariesDirectory)/testUser --version-suffix $(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)"
      zipAfterPublish: false
      workingDirectory: "web/testUser"

  - task: CmdLine@2
    displayName: "TestUser - List files (after dotNet publish)"
    inputs:
      script: |
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  - task: ArchiveFiles@2
    displayName: "TestUser - Compress TestUser to Zip"
    inputs:
      rootFolderOrFile: "$(Build.BinariesDirectory)/testUser"
      includeRootFolder: false #
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-web-testUser.zip"

  - task: CmdLine@2
    displayName: "TestUser - List files (after Compress to Zip)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

  #endregion: Build |- TestUser

  #region: Database
    # Database Scripts: Create New Database
  - task: CopyFiles@2
    displayName: "Copy New Database Scripts to Binaries folder"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)"
      Contents: |
        database/NewDatabaseScript/**/*
      TargetFolder: "$(Build.BinariesDirectory)/database/NewDatabaseScript"
      flattenFolders: true
      CleanTargetFolder: true
      OverWrite: true

  - task: PowerShell@2
    displayName: "Compress New Database Scripts to Zip"
    inputs:
      targetType: "inline"
      script: |
        Compress-Archive '$(Build.BinariesDirectory)/database/NewDatabaseScript' '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-db-new-database-script.zip'

    # Database Scripts: Create Table, View, SQL Job to load CNJT_EMP_FL daily
  - task: CopyFiles@2
    displayName: "Copy CNJT_EMP_FL_Daily Load.sql Scripts to Binaries folder"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)"
      Contents: |
        database/Jobs/CNJT_EMP_FL_Daily Load.sql
      TargetFolder: "$(Build.BinariesDirectory)/database/CNJTJob"
      flattenFolders: true

  - task: PowerShell@2
    displayName: "Compress CNJT_EMP_FL Job Scripts to Zip"
    inputs:
      targetType: "inline"
      script: |
        Compress-Archive '$(Build.BinariesDirectory)/database/CNJTJob' '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-db-cnjt-emp-fl-job.zip'
  
  - task: CmdLine@2
    displayName: "List files (after Compress CNJT_EMP_FL Job Scripts to Zip)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

    # Database Scripts: Create Table/View/Index Scripts
  - task: PowerShell@2
    displayName: "Run ProjectName prep-table-script.ps1 for ABX tables"
    inputs:
      filePath: "$(Build.SourcesDirectory)/prep-table-script.ps1"
      arguments: "$(Build.Repository.Name) $(Build.SourceBranchName) $(Build.DefinitionName) $(Build.BuildNumber) \"ProjectName\" \"ABX\""
      workingDirectory: "$(Build.SourcesDirectory)"
  
  - task: PowerShell@2
    displayName: "Run ProjectName prep-table-script.ps1 for ProjectName ongoing tables"
    inputs:
      filePath: "$(Build.SourcesDirectory)/prep-table-script.ps1"
      arguments: "$(Build.Repository.Name) $(Build.SourceBranchName) $(Build.DefinitionName) $(Build.BuildNumber) \"ProjectName\" \"ProjectName-ONGOING\""
      workingDirectory: "$(Build.SourcesDirectory)"

  - task: PowerShell@2
    displayName: "Run ProjectName prep-table-script.ps1 for ProjectName one time only tables"
    inputs:
      filePath: "$(Build.SourcesDirectory)/prep-table-script.ps1"
      arguments: "$(Build.Repository.Name) $(Build.SourceBranchName) $(Build.DefinitionName) $(Build.BuildNumber) \"ProjectName\" \"ProjectName-ONETIME\""
      workingDirectory: "$(Build.SourcesDirectory)"
  
  - task: PowerShell@2
    displayName: "Run ProjectName prep-table-script.ps1 for ProjectName_ARCHIVE tables"
    inputs:
      filePath: "$(Build.SourcesDirectory)/prep-table-script.ps1"
      arguments: "$(Build.Repository.Name) $(Build.SourceBranchName) $(Build.DefinitionName) $(Build.BuildNumber) \"ProjectName_ARCHIVE\" \"ProjectName-ARCHIVE\""
      workingDirectory: "$(Build.SourcesDirectory)"

  - task: PowerShell@2
    displayName: "Run ProjectName prep-view-script.ps1"
    inputs:
      filePath: "$(Build.SourcesDirectory)/prep-view-script.ps1"
      arguments: "$(Build.Repository.Name) $(Build.SourceBranchName) $(Build.DefinitionName) $(Build.BuildNumber) \"ProjectName\""
      workingDirectory: "$(Build.SourcesDirectory)"

  - task: PowerShell@2
    displayName: "Run ProjectName_ARCHIVE prep-view-script.ps1"
    inputs:
      filePath: "$(Build.SourcesDirectory)/prep-view-script.ps1"
      arguments: "$(Build.Repository.Name) $(Build.SourceBranchName) $(Build.DefinitionName) $(Build.BuildNumber) \"ProjectName_ARCHIVE\""
      workingDirectory: "$(Build.SourcesDirectory)"

  - task: PowerShell@2
    displayName: "Run ProjectName prep-indexes-script.ps1"
    inputs:
      filePath: "$(Build.SourcesDirectory)/prep-indexes-script.ps1"
      arguments: "\"ProjectName\""
      workingDirectory: "$(Build.SourcesDirectory)"

  - task: PowerShell@2
    displayName: "Run ProjectName_ARCHIVE prep-indexes-script.ps1"
    inputs:
      filePath: "$(Build.SourcesDirectory)/prep-indexes-script.ps1"
      arguments: "\"ProjectName_ARCHIVE\""
      workingDirectory: "$(Build.SourcesDirectory)"

  - task: CmdLine@2
    displayName: "List files (after running prep-xxx-script.ps1)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

  - task: CopyFiles@2
    displayName: "Copy SQL Scripts to Binaries folder"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)"
      Contents: |
        database/create-tables*.sql
        database/create-indexes*.sql
        database/create-views*.sql
      TargetFolder: "$(Build.BinariesDirectory)/database/Tables/db-tables/"
      flattenFolders: true
      CleanTargetFolder: true
      OverWrite: true

  - task: CmdLine@2
    displayName: "List files (after copying SQL Scripts to Binaries folder)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

  - task: ArchiveFiles@2
    displayName: "Compress SQL Table Scripts to Zip"
    inputs:
      rootFolderOrFile: "$(Build.BinariesDirectory)/database/Tables"
      includeRootFolder: false #
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-db-tables.zip"

  - task: CmdLine@2
    displayName: "List files (after creating the db-tables.zip)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

    # DataXFR
  - task: CopyFiles@2
    displayName: "Copy DataLoad PowerShell scripts  to target location"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)"
      Contents: database/DataXFR/PS-Script/**
      TargetFolder: "$(Build.BinariesDirectory)/database/DataXFR/PS-Script"
      flattenFolders: true

  - task: CopyFiles@2
    displayName: "Copy post-DataLoad SQL scripts to target location"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)"
      Contents: database/DataXFR/SQL-Script/**
      TargetFolder: "$(Build.BinariesDirectory)/database/DataXFR/SQL-Script"
      flattenFolders: true

  - task: CopyFiles@2
    displayName: "Copy  DataLoad definition XML files to target location"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)"
      Contents: database/DataXFR/XFR-Load/**
      TargetFolder: "$(Build.BinariesDirectory)/database/DataXFR/XFR-Load"
      flattenFolders: true

  - task: CopyFiles@2
    displayName: "Copy Framework Data CSV files to target location"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)"
      Contents: database/DataXFR/abx-CSV-Data/**
      TargetFolder: "$(Build.BinariesDirectory)/database/DataXFR/abx-CSV-Data"
      flattenFolders: true

  - task: CmdLine@2
    displayName: "List files (after consolidating DataXFR files in the binaries location)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

  - task: ArchiveFiles@2
    displayName: "Compress DataXFR to Zip"
    inputs:
      rootFolderOrFile: "$(Build.BinariesDirectory)/database/DataXFR"
      includeRootFolder: false #
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-data-xfr.zip"

  - task: CmdLine@2
    displayName: "List files (after copying DataXFR to target)"
    inputs:
      script: |
        echo Agent.WorkFolder: $(Agent.WorkFolder)
        echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
        echo Build.BinariesDirectory: $(Build.BinariesDirectory)
        echo Build.SourcesDirectory: $(Build.SourcesDirectory)
        echo Structure of work folder of this pipeline:
        tree $(Agent.WorkFolder)/1

    # mf_apps Database Scripts: 
  - task: PowerShell@2
    displayName: "Running prep-sp-script.ps1"
    inputs:
      filePath: "$(Build.SourcesDirectory)/prep-sp-script.ps1"
      arguments: "$(Build.Repository.Name) $(Build.SourceBranchName) $(Build.DefinitionName) $(Build.BuildNumber)"
      workingDirectory: "$(Build.SourcesDirectory)"

  - task: CmdLine@2
    displayName: "List files (after running prep-sp-script.ps1)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  - task: CopyFiles@2
    displayName: "Copy SP creation .sql & .ps1 files to target location"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/database/Stored Procedures"
      Contents: |
        **/*.sql
        **/*.ps1
      TargetFolder: "$(Build.BinariesDirectory)/database/sp-function"

  - task: CopyFiles@2
    displayName: "Copy Function creation .sql files to target location"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/database/Functions"
      Contents: |
        **/abx_*.sql
      TargetFolder: "$(Build.BinariesDirectory)/database/sp-function"

  - task: CmdLine@2
    displayName: "List files (after copying .sql and .ps1 files)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  - task: PowerShell@2
    displayName: "Compress to Stored Procedure Artifacts to Zip"
    inputs:
      targetType: "inline"
      script: |
        Compress-Archive '$(Build.BinariesDirectory)/database/sp-function/*' '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-db-sp.zip'

  - task: CmdLine@2
    displayName: "List files (after copying SP zip to artifact folder)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1
  #endregion: Database

  #region: Utilities
  # dotnet: AD_ProjectName_Sync
  - task: DotNetCoreCLI@2
    displayName: "dotnet Publish - AD_ProjectName_Sync"
    inputs:
      command: "publish"
      publishWebProjects: false
      arguments: "--no-dependencies -c Release -r win-x64 -p:PublishSingleFile=False --self-contained true --property:PublishDir=$(Build.BinariesDirectory)  --output $(Build.BinariesDirectory)/utilities/AD_ProjectName_Sync --version-suffix $(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)"
      zipAfterPublish: false
      workingDirectory: "utilities/dotnet/AD_ProjectName_Sync"

  - task: CmdLine@2
    displayName: "List files (after dotnet publish - AD_ProjectName_Sync)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  # - task: CopyFiles@2
  #   displayName: "Copy batch files to target location"
  #   inputs:
  #     SourceFolder: "$(Build.SourcesDirectory)"
  #     Contents: |
  #         utilities/batch/*.bat          
  #     TargetFolder: "$(Build.BinariesDirectory)/utilities/batch"
  #     flattenFolders: true

  - task: PowerShell@2
    displayName: "Compress Utilities to Zip"
    inputs:
      targetType: "inline"
      script: |
        # 1) Create a zip file for publishing
        Compress-Archive '$(Build.BinariesDirectory)/utilities/' '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-utilities.zip'

  - task: CmdLine@2
    displayName: "List files (after Compress to Zip)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  # # dotnet: Log Analyzer Service
  # - task: DotNetCoreCLI@2
  #   displayName: "dotnet Publish - LogAnalyzer"
  #   inputs:
  #     command: "publish"
  #     publishWebProjects: false
  #     arguments: "--no-dependencies -c Release -r win-x64 -p:PublishSingleFile=False --self-contained true --property:PublishDir=$(Build.BinariesDirectory)  --output $(Build.BinariesDirectory)/LogAnalyzer --version-suffix $(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)"
  #     zipAfterPublish: false
  #     workingDirectory: "utilities/dotnet/LogAnalyzer"

  # - task: CmdLine@2
  #   displayName: "List files (after dotnet publish - LogAnalyzer)"
  #   inputs:
  #     script: |
  #       echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
  #       echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
  #       echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
  #       echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

  #       echo "Structure of work folder of this pipeline:"
  #       tree $(Agent.WorkFolder)/1

  # - task: PowerShell@2
  #   displayName: "Compress LogAnalyzer to Zip"
  #   inputs:
  #     targetType: "inline"
  #     script: |
  #       # 1) Create a zip file for publishing
  #       Compress-Archive '$(Build.BinariesDirectory)/LogAnalyzer/' '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-log-analyzer.zip'

  # - task: CmdLine@2
  #   displayName: "List files (after Compress LogAnalyzer to Zip)"
  #   inputs:
  #     script: |
  #       echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
  #       echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
  #       echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
  #       echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

  #       echo "Structure of work folder of this pipeline:"
  #       tree $(Agent.WorkFolder)/1

  # - task: PowerShell@2
  #   displayName: "Compress Scripts to Zip"
  #   inputs:
  #     targetType: "inline"
  #     script: |
  #       # 1) Create a zip file for publishing
  #       Compress-Archive '$(Build.SourcesDirectory)/utilities/scripts/' '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-scripts.zip'

  # - task: CmdLine@2
  #   displayName: "List files (after Compress Scripts to Zip)"
  #   inputs:
  #     script: |
  #       echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
  #       echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
  #       echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
  #       echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

  #       echo "Structure of work folder of this pipeline:"
  #       tree $(Agent.WorkFolder)/1


  # dotnet: Log Mover Service
  - task: DotNetCoreCLI@2
    displayName: "dotnet Publish - LogMoverService"
    inputs:
      command: "publish"
      publishWebProjects: false
      arguments: "--no-dependencies -c Release -r win-x64 -p:PublishSingleFile=False --self-contained true --property:PublishDir=$(Build.BinariesDirectory)  --output $(Build.BinariesDirectory)/LogMoverService --version-suffix $(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)"
      zipAfterPublish: false
      workingDirectory: "utilities/dotnet/LogMoverService"

  - task: CmdLine@2
    displayName: "List files (after dotnet publish - LogMoverService)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  - task: PowerShell@2
    displayName: "Compress LogMoverService to Zip"
    inputs:
      targetType: "inline"
      script: |
        Compress-Archive '$(Build.BinariesDirectory)/LogMoverService/' '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-log-mover-service.zip'

  - task: CmdLine@2
    displayName: "List files (after Compress LogMoverService to Zip)"
    inputs:
      script: |
        echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
        echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
        echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
        echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"
        echo "Structure of work folder of this pipeline:"
        tree $(Agent.WorkFolder)/1

  #endregion: Utilities

  # #region: Automation Test (Python)
  # - task: PowerShell@2
  #   displayName: "Compress UI Automation Python Artifacts to Zip"
  #   inputs:
  #     targetType: "inline"
  #     script: |
  #       # 1) Create a zip file for publishing
  #       Compress-Archive '$(Build.SourcesDirectory)/tests/ui_automated_tests/*' '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName)-$(Build.SourceBranchName)-$(Build.BuildNumber)-ProjectName-ui-automated-tests.zip'

  # - task: CmdLine@2
  #   displayName: "List files (after Compress to Zip)"
  #   inputs:
  #     script: |
  #       echo "Agent.WorkFolder: " "$(Agent.WorkFolder)"
  #       echo "Build.ArtifactStagingDirectory: " "$(Build.ArtifactStagingDirectory)"
  #       echo "Build.BinariesDirectory: " "$(Build.BinariesDirectory)"
  #       echo "Build.SourcesDirectory: " "$(Build.SourcesDirectory)"

  #       echo "Structure of work folder of this pipeline:"
  #       tree $(Agent.WorkFolder)/1
  # #endregion: Automation Test (Python)  

  #region: Publish Artifacts
  - task: PublishPipelineArtifact@1
    displayName: "Publish Pipeline artifact"
    inputs:
      targetPath: "$(Build.ArtifactStagingDirectory)"
      artifact: "$(Build.DefinitionName)-$(Build.SourceBranchName)"
      publishLocation: "pipeline"
  #endregion: Publish Artifacts
#endregion
